/*
Copyright 2020 Gravitational, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package cli

import (
	"archive/tar"
	"bytes"
	"context"
	"fmt"
	"io/ioutil"

	"github.com/google/go-cmp/cmp"
	libapp "github.com/gravitational/gravity/lib/app"
	"github.com/gravitational/gravity/lib/app/service"
	apptest "github.com/gravitational/gravity/lib/app/service/test"
	"github.com/gravitational/gravity/lib/archive"
	"github.com/gravitational/gravity/lib/docker"
	dockertest "github.com/gravitational/gravity/lib/docker/test"
	"github.com/gravitational/gravity/lib/loc"
	"github.com/gravitational/gravity/lib/localenv"
	packtest "github.com/gravitational/gravity/lib/pack/test"
	"github.com/gravitational/gravity/lib/utils"

	"github.com/sirupsen/logrus"
	"gopkg.in/check.v1"
)

type OpsSuite struct{}

var _ = check.Suite(&OpsSuite{})

func (*OpsSuite) TestUploadsUpdate(c *check.C) {
	client, err := docker.NewClientFromEnv()
	if err != nil {
		c.Skip(fmt.Sprint("This test requires docker: ", err))
	}

	// setup
	from, to := service.NewTestServices(c.MkDir(), c), service.NewTestServices(c.MkDir(), c)
	depPackageLoc := loc.MustParseLocator("example.com/package:1.0.0")
	depAppLoc := loc.MustParseLocator("gravitational.io/dep-app:1.0.0")
	appLoc := loc.MustParseLocator("gravitational.io/app:1.0.0")
	depApp := apptest.SystemApplication(depAppLoc).
		WithSchemaPackageDependencies(depPackageLoc).
		Build()
	clusterApp := apptest.DefaultClusterApplication(appLoc).
		WithAppDependencies(depApp).
		WithItems(registryTestimage_1_0_0...).
		Build()
	app := apptest.CreateApplication(apptest.AppRequest{
		App:      clusterApp,
		Apps:     from.Apps,
		Packages: from.Packages,
	}, c)

	logger := logrus.WithField("test", "TestUploadsUpdate")
	synchronizer := docker.NewSynchronizer(logger, client, utils.DiscardProgress)
	registry := dockertest.NewRegistry(c.MkDir(), synchronizer, c)
	imageService, err := docker.NewImageService(docker.RegistryConnectionRequest{
		RegistryAddress: registry.Addr(),
		Insecure:        true,
	})
	c.Assert(err, check.IsNil)
	puller := libapp.Puller{
		SrcPack: from.Packages,
		SrcApp:  from.Apps,
		DstPack: to.Packages,
		DstApp:  to.Apps,
	}
	syncer := libapp.Syncer{
		PackService:  from.Packages,
		AppService:   from.Apps,
		ImageService: imageService,
		Progress:     localenv.Silent(true),
	}

	// exercise
	err = uploadApplicationUpdate(context.TODO(), puller, syncer, []docker.ImageService{imageService}, *app)

	// verify
	c.Assert(err, check.IsNil)
	verifyRegistry(context.TODO(), c, imageService, "testimage:1.0.0")
	packtest.VerifyPackages(to.Packages, []loc.Locator{
		depAppLoc,
		depPackageLoc,
		appLoc,
		apptest.RuntimeApplicationLoc,
		apptest.RuntimePackageLoc,
	}, c)
}

func verifyRegistry(ctx context.Context, c *check.C, service docker.ImageService, expectedImages ...string) {
	images, err := service.List(ctx)
	c.Assert(err, check.IsNil)
	refs := make([]string, 0, len(images))
	for _, image := range images {
		for _, tag := range image.Tags {
			refs = append(refs, fmt.Sprint(image.Repository, ":", tag))
		}
	}
	if !cmp.Equal(refs, expectedImages) {
		c.Error("Mismatched image references:", cmp.Diff(refs, expectedImages))
	}
}

// Contents of the registry with a testimage:1.0.0, generated as following:
//
// $ echo '1.0.0' > version.txt

// Dockerfile:
//
// FROM scratch
// ADD version.txt /
//
// $ docker build -t testimage:1.0.0 -f Dockerfile .
//
// The contents will be expanded in the following layout:
// <root>/registry/docker/registry/v2/...
//nolint:revive,stylecheck // var-naming
var registryTestimage_1_0_0 = []*archive.Item{
	archive.DirItem("registry/"),
	archive.DirItem("registry/docker"),
	archive.DirItem("registry/docker/registry"),
	archive.DirItem("registry/docker/registry/v2"),
	archive.DirItem("registry/docker/registry/v2/blobs"),
	archive.DirItem("registry/docker/registry/v2/blobs/sha256"),
	archive.DirItem("registry/docker/registry/v2/blobs/sha256/82"),
	archive.DirItem("registry/docker/registry/v2/blobs/sha256/82/820a89fea264d8eaacbd82b4ed3cbebbe84e909b6d558909ebd7b8d794f63565"),
	{
		Header: tar.Header{
			Mode: 0o644,
			Name: "registry/docker/registry/v2/blobs/sha256/82/820a89fea264d8eaacbd82b4ed3cbebbe84e909b6d558909ebd7b8d794f63565/data",
			Size: 524,
		},
		Data: ioutil.NopCloser(bytes.NewReader([]byte{
			0x7B, 0xA, 0x20, 0x20, 0x20, 0x22, 0x73, 0x63, 0x68, 0x65,
			0x6D, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x22,
			0x3A, 0x20, 0x32, 0x2C, 0xA, 0x20, 0x20, 0x20, 0x22, 0x6D,
			0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3A,
			0x20, 0x22, 0x61, 0x70, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74,
			0x69, 0x6F, 0x6E, 0x2F, 0x76, 0x6E, 0x64, 0x2E, 0x64, 0x6F,
			0x63, 0x6B, 0x65, 0x72, 0x2E, 0x64, 0x69, 0x73, 0x74, 0x72,
			0x69, 0x62, 0x75, 0x74, 0x69, 0x6F, 0x6E, 0x2E, 0x6D, 0x61,
			0x6E, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2E, 0x76, 0x32, 0x2B,
			0x6A, 0x73, 0x6F, 0x6E, 0x22, 0x2C, 0xA, 0x20, 0x20, 0x20,
			0x22, 0x63, 0x6F, 0x6E, 0x66, 0x69, 0x67, 0x22, 0x3A, 0x20,
			0x7B, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x6D,
			0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3A,
			0x20, 0x22, 0x61, 0x70, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74,
			0x69, 0x6F, 0x6E, 0x2F, 0x76, 0x6E, 0x64, 0x2E, 0x64, 0x6F,
			0x63, 0x6B, 0x65, 0x72, 0x2E, 0x63, 0x6F, 0x6E, 0x74, 0x61,
			0x69, 0x6E, 0x65, 0x72, 0x2E, 0x69, 0x6D, 0x61, 0x67, 0x65,
			0x2E, 0x76, 0x31, 0x2B, 0x6A, 0x73, 0x6F, 0x6E, 0x22, 0x2C,
			0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x73, 0x69,
			0x7A, 0x65, 0x22, 0x3A, 0x20, 0x31, 0x31, 0x37, 0x36, 0x2C,
			0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x64, 0x69,
			0x67, 0x65, 0x73, 0x74, 0x22, 0x3A, 0x20, 0x22, 0x73, 0x68,
			0x61, 0x32, 0x35, 0x36, 0x3A, 0x66, 0x66, 0x35, 0x65, 0x32,
			0x61, 0x39, 0x30, 0x61, 0x31, 0x66, 0x66, 0x38, 0x38, 0x62,
			0x39, 0x33, 0x63, 0x61, 0x31, 0x33, 0x32, 0x38, 0x36, 0x64,
			0x61, 0x63, 0x37, 0x65, 0x62, 0x31, 0x38, 0x39, 0x38, 0x39,
			0x32, 0x30, 0x64, 0x62, 0x31, 0x32, 0x64, 0x34, 0x36, 0x62,
			0x35, 0x34, 0x36, 0x34, 0x39, 0x36, 0x30, 0x30, 0x65, 0x37,
			0x33, 0x63, 0x30, 0x34, 0x32, 0x39, 0x39, 0x63, 0x38, 0x22,
			0xA, 0x20, 0x20, 0x20, 0x7D, 0x2C, 0xA, 0x20, 0x20, 0x20,
			0x22, 0x6C, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x3A, 0x20,
			0x5B, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7B, 0xA,
			0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22,
			0x6D, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22,
			0x3A, 0x20, 0x22, 0x61, 0x70, 0x70, 0x6C, 0x69, 0x63, 0x61,
			0x74, 0x69, 0x6F, 0x6E, 0x2F, 0x76, 0x6E, 0x64, 0x2E, 0x64,
			0x6F, 0x63, 0x6B, 0x65, 0x72, 0x2E, 0x69, 0x6D, 0x61, 0x67,
			0x65, 0x2E, 0x72, 0x6F, 0x6F, 0x74, 0x66, 0x73, 0x2E, 0x64,
			0x69, 0x66, 0x66, 0x2E, 0x74, 0x61, 0x72, 0x2E, 0x67, 0x7A,
			0x69, 0x70, 0x22, 0x2C, 0xA, 0x20, 0x20, 0x20, 0x20, 0x20,
			0x20, 0x20, 0x20, 0x20, 0x22, 0x73, 0x69, 0x7A, 0x65, 0x22,
			0x3A, 0x20, 0x31, 0x31, 0x33, 0x2C, 0xA, 0x20, 0x20, 0x20,
			0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x64, 0x69, 0x67,
			0x65, 0x73, 0x74, 0x22, 0x3A, 0x20, 0x22, 0x73, 0x68, 0x61,
			0x32, 0x35, 0x36, 0x3A, 0x65, 0x34, 0x36, 0x34, 0x64, 0x66,
			0x62, 0x64, 0x38, 0x37, 0x35, 0x34, 0x66, 0x33, 0x64, 0x65,
			0x63, 0x34, 0x61, 0x33, 0x38, 0x65, 0x66, 0x33, 0x30, 0x31,
			0x34, 0x63, 0x30, 0x65, 0x34, 0x61, 0x32, 0x35, 0x65, 0x63,
			0x38, 0x38, 0x33, 0x63, 0x63, 0x62, 0x63, 0x37, 0x63, 0x35,
			0x64, 0x30, 0x32, 0x37, 0x61, 0x35, 0x66, 0x36, 0x61, 0x63,
			0x62, 0x35, 0x39, 0x33, 0x31, 0x35, 0x65, 0x61, 0x22, 0xA,
			0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7D, 0xA, 0x20, 0x20,
			0x20, 0x5D, 0xA, 0x7D,
		})),
	},
	archive.DirItem("registry/docker/registry/v2/blobs/sha256/e4"),
	archive.DirItem("registry/docker/registry/v2/blobs/sha256/e4/e464dfbd8754f3dec4a38ef3014c0e4a25ec883ccbc7c5d027a5f6acb59315ea"),
	{
		Header: tar.Header{
			Mode: 0o644,
			Name: "registry/docker/registry/v2/blobs/sha256/e4/e464dfbd8754f3dec4a38ef3014c0e4a25ec883ccbc7c5d027a5f6acb59315ea/data",
			Size: 113,
		},
		Data: ioutil.NopCloser(bytes.NewReader([]byte{
			0x1F, 0x8B, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF,
			0xEC, 0xCF, 0x31, 0xA, 0x2, 0x31, 0x10, 0x85, 0xE1, 0xA9,
			0x3D, 0x85, 0x27, 0x8, 0xFF, 0x8B, 0x61, 0x3C, 0x8F, 0x85,
			0x85, 0x8D, 0x42, 0x12, 0xC5, 0xE3, 0x5B, 0xD8, 0x2C, 0x69,
			0x97, 0xEC, 0xB2, 0x30, 0x5F, 0x33, 0xE5, 0xFC, 0xEF, 0x73,
			0xAF, 0xED, 0xF1, 0x7A, 0xA6, 0xFE, 0xED, 0x36, 0xB, 0x2,
			0xF7, 0x62, 0xFC, 0x8D, 0x17, 0x70, 0x53, 0x11, 0xF9, 0x42,
			0x96, 0xAE, 0x86, 0x54, 0x1C, 0x3B, 0x33, 0xAD, 0x68, 0xE1,
			0xDD, 0xFA, 0xAD, 0x1A, 0xAB, 0x7F, 0x8D, 0xE3, 0xE, 0x42,
			0x89, 0xC4, 0x69, 0xEF, 0x8A, 0x10, 0x42, 0x8, 0x5B, 0xFB,
			0x5, 0x0, 0x0, 0xFF, 0xFF, 0xE8, 0xA2, 0xE1, 0xD8, 0x0,
			0x8, 0x0, 0x0,
		})),
	},
	archive.DirItem("registry/docker/registry/v2/blobs/sha256/ff"),
	archive.DirItem("registry/docker/registry/v2/blobs/sha256/ff/ff5e2a90a1ff88b93ca13286dac7eb1898920db12d46b54649600e73c04299c8"),
	{
		Header: tar.Header{
			Mode: 0o644,
			Name: "registry/docker/registry/v2/blobs/sha256/ff/ff5e2a90a1ff88b93ca13286dac7eb1898920db12d46b54649600e73c04299c8/data",
			Size: 1176,
		},
		Data: ioutil.NopCloser(bytes.NewReader([]byte{
			0x7B, 0x22, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63,
			0x74, 0x75, 0x72, 0x65, 0x22, 0x3A, 0x22, 0x61, 0x6D, 0x64,
			0x36, 0x34, 0x22, 0x2C, 0x22, 0x63, 0x6F, 0x6E, 0x66, 0x69,
			0x67, 0x22, 0x3A, 0x7B, 0x22, 0x48, 0x6F, 0x73, 0x74, 0x6E,
			0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x22, 0x2C, 0x22, 0x44,
			0x6F, 0x6D, 0x61, 0x69, 0x6E, 0x6E, 0x61, 0x6D, 0x65, 0x22,
			0x3A, 0x22, 0x22, 0x2C, 0x22, 0x55, 0x73, 0x65, 0x72, 0x22,
			0x3A, 0x22, 0x22, 0x2C, 0x22, 0x41, 0x74, 0x74, 0x61, 0x63,
			0x68, 0x53, 0x74, 0x64, 0x69, 0x6E, 0x22, 0x3A, 0x66, 0x61,
			0x6C, 0x73, 0x65, 0x2C, 0x22, 0x41, 0x74, 0x74, 0x61, 0x63,
			0x68, 0x53, 0x74, 0x64, 0x6F, 0x75, 0x74, 0x22, 0x3A, 0x66,
			0x61, 0x6C, 0x73, 0x65, 0x2C, 0x22, 0x41, 0x74, 0x74, 0x61,
			0x63, 0x68, 0x53, 0x74, 0x64, 0x65, 0x72, 0x72, 0x22, 0x3A,
			0x66, 0x61, 0x6C, 0x73, 0x65, 0x2C, 0x22, 0x54, 0x74, 0x79,
			0x22, 0x3A, 0x66, 0x61, 0x6C, 0x73, 0x65, 0x2C, 0x22, 0x4F,
			0x70, 0x65, 0x6E, 0x53, 0x74, 0x64, 0x69, 0x6E, 0x22, 0x3A,
			0x66, 0x61, 0x6C, 0x73, 0x65, 0x2C, 0x22, 0x53, 0x74, 0x64,
			0x69, 0x6E, 0x4F, 0x6E, 0x63, 0x65, 0x22, 0x3A, 0x66, 0x61,
			0x6C, 0x73, 0x65, 0x2C, 0x22, 0x45, 0x6E, 0x76, 0x22, 0x3A,
			0x5B, 0x22, 0x50, 0x41, 0x54, 0x48, 0x3D, 0x2F, 0x75, 0x73,
			0x72, 0x2F, 0x6C, 0x6F, 0x63, 0x61, 0x6C, 0x2F, 0x73, 0x62,
			0x69, 0x6E, 0x3A, 0x2F, 0x75, 0x73, 0x72, 0x2F, 0x6C, 0x6F,
			0x63, 0x61, 0x6C, 0x2F, 0x62, 0x69, 0x6E, 0x3A, 0x2F, 0x75,
			0x73, 0x72, 0x2F, 0x73, 0x62, 0x69, 0x6E, 0x3A, 0x2F, 0x75,
			0x73, 0x72, 0x2F, 0x62, 0x69, 0x6E, 0x3A, 0x2F, 0x73, 0x62,
			0x69, 0x6E, 0x3A, 0x2F, 0x62, 0x69, 0x6E, 0x22, 0x5D, 0x2C,
			0x22, 0x43, 0x6D, 0x64, 0x22, 0x3A, 0x6E, 0x75, 0x6C, 0x6C,
			0x2C, 0x22, 0x49, 0x6D, 0x61, 0x67, 0x65, 0x22, 0x3A, 0x22,
			0x22, 0x2C, 0x22, 0x56, 0x6F, 0x6C, 0x75, 0x6D, 0x65, 0x73,
			0x22, 0x3A, 0x6E, 0x75, 0x6C, 0x6C, 0x2C, 0x22, 0x57, 0x6F,
			0x72, 0x6B, 0x69, 0x6E, 0x67, 0x44, 0x69, 0x72, 0x22, 0x3A,
			0x22, 0x22, 0x2C, 0x22, 0x45, 0x6E, 0x74, 0x72, 0x79, 0x70,
			0x6F, 0x69, 0x6E, 0x74, 0x22, 0x3A, 0x6E, 0x75, 0x6C, 0x6C,
			0x2C, 0x22, 0x4F, 0x6E, 0x42, 0x75, 0x69, 0x6C, 0x64, 0x22,
			0x3A, 0x6E, 0x75, 0x6C, 0x6C, 0x2C, 0x22, 0x4C, 0x61, 0x62,
			0x65, 0x6C, 0x73, 0x22, 0x3A, 0x6E, 0x75, 0x6C, 0x6C, 0x7D,
			0x2C, 0x22, 0x63, 0x6F, 0x6E, 0x74, 0x61, 0x69, 0x6E, 0x65,
			0x72, 0x5F, 0x63, 0x6F, 0x6E, 0x66, 0x69, 0x67, 0x22, 0x3A,
			0x7B, 0x22, 0x48, 0x6F, 0x73, 0x74, 0x6E, 0x61, 0x6D, 0x65,
			0x22, 0x3A, 0x22, 0x22, 0x2C, 0x22, 0x44, 0x6F, 0x6D, 0x61,
			0x69, 0x6E, 0x6E, 0x61, 0x6D, 0x65, 0x22, 0x3A, 0x22, 0x22,
			0x2C, 0x22, 0x55, 0x73, 0x65, 0x72, 0x22, 0x3A, 0x22, 0x22,
			0x2C, 0x22, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x53, 0x74,
			0x64, 0x69, 0x6E, 0x22, 0x3A, 0x66, 0x61, 0x6C, 0x73, 0x65,
			0x2C, 0x22, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x53, 0x74,
			0x64, 0x6F, 0x75, 0x74, 0x22, 0x3A, 0x66, 0x61, 0x6C, 0x73,
			0x65, 0x2C, 0x22, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x53,
			0x74, 0x64, 0x65, 0x72, 0x72, 0x22, 0x3A, 0x66, 0x61, 0x6C,
			0x73, 0x65, 0x2C, 0x22, 0x54, 0x74, 0x79, 0x22, 0x3A, 0x66,
			0x61, 0x6C, 0x73, 0x65, 0x2C, 0x22, 0x4F, 0x70, 0x65, 0x6E,
			0x53, 0x74, 0x64, 0x69, 0x6E, 0x22, 0x3A, 0x66, 0x61, 0x6C,
			0x73, 0x65, 0x2C, 0x22, 0x53, 0x74, 0x64, 0x69, 0x6E, 0x4F,
			0x6E, 0x63, 0x65, 0x22, 0x3A, 0x66, 0x61, 0x6C, 0x73, 0x65,
			0x2C, 0x22, 0x45, 0x6E, 0x76, 0x22, 0x3A, 0x5B, 0x22, 0x50,
			0x41, 0x54, 0x48, 0x3D, 0x2F, 0x75, 0x73, 0x72, 0x2F, 0x6C,
			0x6F, 0x63, 0x61, 0x6C, 0x2F, 0x73, 0x62, 0x69, 0x6E, 0x3A,
			0x2F, 0x75, 0x73, 0x72, 0x2F, 0x6C, 0x6F, 0x63, 0x61, 0x6C,
			0x2F, 0x62, 0x69, 0x6E, 0x3A, 0x2F, 0x75, 0x73, 0x72, 0x2F,
			0x73, 0x62, 0x69, 0x6E, 0x3A, 0x2F, 0x75, 0x73, 0x72, 0x2F,
			0x62, 0x69, 0x6E, 0x3A, 0x2F, 0x73, 0x62, 0x69, 0x6E, 0x3A,
			0x2F, 0x62, 0x69, 0x6E, 0x22, 0x5D, 0x2C, 0x22, 0x43, 0x6D,
			0x64, 0x22, 0x3A, 0x5B, 0x22, 0x2F, 0x62, 0x69, 0x6E, 0x2F,
			0x73, 0x68, 0x22, 0x2C, 0x22, 0x2D, 0x63, 0x22, 0x2C, 0x22,
			0x23, 0x28, 0x6E, 0x6F, 0x70, 0x29, 0x20, 0x41, 0x44, 0x44,
			0x20, 0x66, 0x69, 0x6C, 0x65, 0x3A, 0x38, 0x35, 0x36, 0x31,
			0x30, 0x65, 0x61, 0x66, 0x34, 0x30, 0x61, 0x37, 0x65, 0x32,
			0x30, 0x38, 0x32, 0x64, 0x61, 0x31, 0x39, 0x39, 0x62, 0x35,
			0x65, 0x39, 0x62, 0x62, 0x32, 0x35, 0x38, 0x64, 0x33, 0x61,
			0x39, 0x61, 0x63, 0x65, 0x64, 0x36, 0x65, 0x37, 0x36, 0x34,
			0x33, 0x37, 0x31, 0x37, 0x35, 0x30, 0x38, 0x64, 0x62, 0x62,
			0x32, 0x61, 0x31, 0x64, 0x66, 0x63, 0x63, 0x63, 0x37, 0x39,
			0x20, 0x69, 0x6E, 0x20, 0x2F, 0x20, 0x22, 0x5D, 0x2C, 0x22,
			0x49, 0x6D, 0x61, 0x67, 0x65, 0x22, 0x3A, 0x22, 0x22, 0x2C,
			0x22, 0x56, 0x6F, 0x6C, 0x75, 0x6D, 0x65, 0x73, 0x22, 0x3A,
			0x6E, 0x75, 0x6C, 0x6C, 0x2C, 0x22, 0x57, 0x6F, 0x72, 0x6B,
			0x69, 0x6E, 0x67, 0x44, 0x69, 0x72, 0x22, 0x3A, 0x22, 0x22,
			0x2C, 0x22, 0x45, 0x6E, 0x74, 0x72, 0x79, 0x70, 0x6F, 0x69,
			0x6E, 0x74, 0x22, 0x3A, 0x6E, 0x75, 0x6C, 0x6C, 0x2C, 0x22,
			0x4F, 0x6E, 0x42, 0x75, 0x69, 0x6C, 0x64, 0x22, 0x3A, 0x6E,
			0x75, 0x6C, 0x6C, 0x2C, 0x22, 0x4C, 0x61, 0x62, 0x65, 0x6C,
			0x73, 0x22, 0x3A, 0x6E, 0x75, 0x6C, 0x6C, 0x7D, 0x2C, 0x22,
			0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x3A, 0x22,
			0x32, 0x30, 0x32, 0x31, 0x2D, 0x30, 0x38, 0x2D, 0x30, 0x33,
			0x54, 0x31, 0x38, 0x3A, 0x30, 0x37, 0x3A, 0x34, 0x30, 0x2E,
			0x30, 0x38, 0x39, 0x36, 0x34, 0x36, 0x33, 0x35, 0x31, 0x5A,
			0x22, 0x2C, 0x22, 0x64, 0x6F, 0x63, 0x6B, 0x65, 0x72, 0x5F,
			0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x22, 0x3A, 0x22,
			0x32, 0x30, 0x2E, 0x31, 0x30, 0x2E, 0x36, 0x22, 0x2C, 0x22,
			0x68, 0x69, 0x73, 0x74, 0x6F, 0x72, 0x79, 0x22, 0x3A, 0x5B,
			0x7B, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22,
			0x3A, 0x22, 0x32, 0x30, 0x32, 0x31, 0x2D, 0x30, 0x38, 0x2D,
			0x30, 0x33, 0x54, 0x31, 0x38, 0x3A, 0x30, 0x37, 0x3A, 0x34,
			0x30, 0x2E, 0x30, 0x38, 0x39, 0x36, 0x34, 0x36, 0x33, 0x35,
			0x31, 0x5A, 0x22, 0x2C, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74,
			0x65, 0x64, 0x5F, 0x62, 0x79, 0x22, 0x3A, 0x22, 0x2F, 0x62,
			0x69, 0x6E, 0x2F, 0x73, 0x68, 0x20, 0x2D, 0x63, 0x20, 0x23,
			0x28, 0x6E, 0x6F, 0x70, 0x29, 0x20, 0x41, 0x44, 0x44, 0x20,
			0x66, 0x69, 0x6C, 0x65, 0x3A, 0x38, 0x35, 0x36, 0x31, 0x30,
			0x65, 0x61, 0x66, 0x34, 0x30, 0x61, 0x37, 0x65, 0x32, 0x30,
			0x38, 0x32, 0x64, 0x61, 0x31, 0x39, 0x39, 0x62, 0x35, 0x65,
			0x39, 0x62, 0x62, 0x32, 0x35, 0x38, 0x64, 0x33, 0x61, 0x39,
			0x61, 0x63, 0x65, 0x64, 0x36, 0x65, 0x37, 0x36, 0x34, 0x33,
			0x37, 0x31, 0x37, 0x35, 0x30, 0x38, 0x64, 0x62, 0x62, 0x32,
			0x61, 0x31, 0x64, 0x66, 0x63, 0x63, 0x63, 0x37, 0x39, 0x20,
			0x69, 0x6E, 0x20, 0x2F, 0x20, 0x22, 0x7D, 0x5D, 0x2C, 0x22,
			0x6F, 0x73, 0x22, 0x3A, 0x22, 0x6C, 0x69, 0x6E, 0x75, 0x78,
			0x22, 0x2C, 0x22, 0x72, 0x6F, 0x6F, 0x74, 0x66, 0x73, 0x22,
			0x3A, 0x7B, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3A, 0x22,
			0x6C, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x2C, 0x22, 0x64,
			0x69, 0x66, 0x66, 0x5F, 0x69, 0x64, 0x73, 0x22, 0x3A, 0x5B,
			0x22, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x3A, 0x65, 0x36,
			0x32, 0x62, 0x64, 0x34, 0x37, 0x62, 0x39, 0x38, 0x33, 0x64,
			0x30, 0x38, 0x62, 0x34, 0x36, 0x33, 0x63, 0x66, 0x32, 0x31,
			0x62, 0x37, 0x61, 0x65, 0x35, 0x65, 0x62, 0x38, 0x66, 0x35,
			0x34, 0x36, 0x31, 0x66, 0x34, 0x39, 0x30, 0x66, 0x61, 0x65,
			0x61, 0x34, 0x38, 0x34, 0x61, 0x62, 0x35, 0x37, 0x61, 0x61,
			0x38, 0x35, 0x39, 0x33, 0x61, 0x37, 0x31, 0x36, 0x62, 0x66,
			0x37, 0x35, 0x22, 0x5D, 0x7D, 0x7D,
		})),
	},
	archive.DirItem("registry/docker/registry/v2/repositories"),
	archive.DirItem("registry/docker/registry/v2/repositories/testimage"),
	archive.DirItem("registry/docker/registry/v2/repositories/testimage/_layers"),
	archive.DirItem("registry/docker/registry/v2/repositories/testimage/_layers/sha256"),
	archive.DirItem("registry/docker/registry/v2/repositories/testimage/_layers/sha256/e464dfbd8754f3dec4a38ef3014c0e4a25ec883ccbc7c5d027a5f6acb59315ea"),
	{
		Header: tar.Header{
			Mode: 0o644,
			Name: "registry/docker/registry/v2/repositories/testimage/_layers/sha256/e464dfbd8754f3dec4a38ef3014c0e4a25ec883ccbc7c5d027a5f6acb59315ea/link",
			Size: 71,
		},
		Data: ioutil.NopCloser(bytes.NewReader([]byte{
			0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x3A, 0x65, 0x34, 0x36,
			0x34, 0x64, 0x66, 0x62, 0x64, 0x38, 0x37, 0x35, 0x34, 0x66,
			0x33, 0x64, 0x65, 0x63, 0x34, 0x61, 0x33, 0x38, 0x65, 0x66,
			0x33, 0x30, 0x31, 0x34, 0x63, 0x30, 0x65, 0x34, 0x61, 0x32,
			0x35, 0x65, 0x63, 0x38, 0x38, 0x33, 0x63, 0x63, 0x62, 0x63,
			0x37, 0x63, 0x35, 0x64, 0x30, 0x32, 0x37, 0x61, 0x35, 0x66,
			0x36, 0x61, 0x63, 0x62, 0x35, 0x39, 0x33, 0x31, 0x35, 0x65,
			0x61,
		})),
	},
	archive.DirItem("registry/docker/registry/v2/repositories/testimage/_layers/sha256/ff5e2a90a1ff88b93ca13286dac7eb1898920db12d46b54649600e73c04299c8"),
	{
		Header: tar.Header{
			Mode: 0o644,
			Name: "registry/docker/registry/v2/repositories/testimage/_layers/sha256/ff5e2a90a1ff88b93ca13286dac7eb1898920db12d46b54649600e73c04299c8/link",
			Size: 71,
		},
		Data: ioutil.NopCloser(bytes.NewReader([]byte{
			0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x3A, 0x66, 0x66, 0x35,
			0x65, 0x32, 0x61, 0x39, 0x30, 0x61, 0x31, 0x66, 0x66, 0x38,
			0x38, 0x62, 0x39, 0x33, 0x63, 0x61, 0x31, 0x33, 0x32, 0x38,
			0x36, 0x64, 0x61, 0x63, 0x37, 0x65, 0x62, 0x31, 0x38, 0x39,
			0x38, 0x39, 0x32, 0x30, 0x64, 0x62, 0x31, 0x32, 0x64, 0x34,
			0x36, 0x62, 0x35, 0x34, 0x36, 0x34, 0x39, 0x36, 0x30, 0x30,
			0x65, 0x37, 0x33, 0x63, 0x30, 0x34, 0x32, 0x39, 0x39, 0x63,
			0x38,
		})),
	},
	archive.DirItem("registry/docker/registry/v2/repositories/testimage/_manifests"),
	archive.DirItem("registry/docker/registry/v2/repositories/testimage/_manifests/revisions"),
	archive.DirItem("registry/docker/registry/v2/repositories/testimage/_manifests/revisions/sha256"),
	archive.DirItem("registry/docker/registry/v2/repositories/testimage/_manifests/revisions/sha256/820a89fea264d8eaacbd82b4ed3cbebbe84e909b6d558909ebd7b8d794f63565"),
	{
		Header: tar.Header{
			Mode: 0o644,
			Name: "registry/docker/registry/v2/repositories/testimage/_manifests/revisions/sha256/820a89fea264d8eaacbd82b4ed3cbebbe84e909b6d558909ebd7b8d794f63565/link",
			Size: 71,
		},
		Data: ioutil.NopCloser(bytes.NewReader([]byte{
			0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x3A, 0x38, 0x32, 0x30,
			0x61, 0x38, 0x39, 0x66, 0x65, 0x61, 0x32, 0x36, 0x34, 0x64,
			0x38, 0x65, 0x61, 0x61, 0x63, 0x62, 0x64, 0x38, 0x32, 0x62,
			0x34, 0x65, 0x64, 0x33, 0x63, 0x62, 0x65, 0x62, 0x62, 0x65,
			0x38, 0x34, 0x65, 0x39, 0x30, 0x39, 0x62, 0x36, 0x64, 0x35,
			0x35, 0x38, 0x39, 0x30, 0x39, 0x65, 0x62, 0x64, 0x37, 0x62,
			0x38, 0x64, 0x37, 0x39, 0x34, 0x66, 0x36, 0x33, 0x35, 0x36,
			0x35,
		})),
	},
	archive.DirItem("registry/docker/registry/v2/repositories/testimage/_manifests/tags"),
	archive.DirItem("registry/docker/registry/v2/repositories/testimage/_manifests/tags/1.0.0"),
	archive.DirItem("registry/docker/registry/v2/repositories/testimage/_manifests/tags/1.0.0/current"),
	{
		Header: tar.Header{
			Mode: 0o644,
			Name: "registry/docker/registry/v2/repositories/testimage/_manifests/tags/1.0.0/current/link",
			Size: 71,
		},
		Data: ioutil.NopCloser(bytes.NewReader([]byte{
			0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x3A, 0x38, 0x32, 0x30,
			0x61, 0x38, 0x39, 0x66, 0x65, 0x61, 0x32, 0x36, 0x34, 0x64,
			0x38, 0x65, 0x61, 0x61, 0x63, 0x62, 0x64, 0x38, 0x32, 0x62,
			0x34, 0x65, 0x64, 0x33, 0x63, 0x62, 0x65, 0x62, 0x62, 0x65,
			0x38, 0x34, 0x65, 0x39, 0x30, 0x39, 0x62, 0x36, 0x64, 0x35,
			0x35, 0x38, 0x39, 0x30, 0x39, 0x65, 0x62, 0x64, 0x37, 0x62,
			0x38, 0x64, 0x37, 0x39, 0x34, 0x66, 0x36, 0x33, 0x35, 0x36,
			0x35,
		})),
	},
	archive.DirItem("registry/docker/registry/v2/repositories/testimage/_manifests/tags/1.0.0/index"),
	archive.DirItem("registry/docker/registry/v2/repositories/testimage/_manifests/tags/1.0.0/index/sha256"),
	archive.DirItem("registry/docker/registry/v2/repositories/testimage/_manifests/tags/1.0.0/index/sha256/820a89fea264d8eaacbd82b4ed3cbebbe84e909b6d558909ebd7b8d794f63565"),
	{
		Header: tar.Header{
			Mode: 0o644,
			Name: "registry/docker/registry/v2/repositories/testimage/_manifests/tags/1.0.0/index/sha256/820a89fea264d8eaacbd82b4ed3cbebbe84e909b6d558909ebd7b8d794f63565/link",
			Size: 71,
		},
		Data: ioutil.NopCloser(bytes.NewReader([]byte{
			0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x3A, 0x38, 0x32, 0x30,
			0x61, 0x38, 0x39, 0x66, 0x65, 0x61, 0x32, 0x36, 0x34, 0x64,
			0x38, 0x65, 0x61, 0x61, 0x63, 0x62, 0x64, 0x38, 0x32, 0x62,
			0x34, 0x65, 0x64, 0x33, 0x63, 0x62, 0x65, 0x62, 0x62, 0x65,
			0x38, 0x34, 0x65, 0x39, 0x30, 0x39, 0x62, 0x36, 0x64, 0x35,
			0x35, 0x38, 0x39, 0x30, 0x39, 0x65, 0x62, 0x64, 0x37, 0x62,
			0x38, 0x64, 0x37, 0x39, 0x34, 0x66, 0x36, 0x33, 0x35, 0x36,
			0x35,
		})),
	},
	archive.DirItem("registry/docker/registry/v2/repositories/testimage/_uploads"),
}
